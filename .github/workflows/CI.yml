# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: C/I
on:
  push:
    branches:
      - main
      - release/v*
      - dev
      - test/*
    paths-ignore:
      - '.github/**'
      - '!.github/config/testcases.json'
      - '!.github/workflows/CI.yml'
      - '!.github/workflows/CI-Operator.yml'
      - '**.md'
      - 'tools/workflow/**'

  # from collector and contrib repo
  repository_dispatch:
    types: [dependency-build, workflow-run]

env:
  IMAGE_NAME: aws-otel-collector
  PACKAGING_ROOT: build/packages
  ECR_REPO: n7z4r8f9/test-aws-otel
  TESTING_FRAMEWORK_REPO: jj22ee/aws-otel-test-framework
  MAX_JOBS: 10
  BATCH_INCLUDED_SERVICES: EKS,ECS,EC2,EKS_ARM64,EKS_FARGATE
  GO_VERSION: ~1.20.10


concurrency:
  group: ci-batched${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  validate-markdown:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install markdown-link-check
        run: npm install -g markdown-link-check

      - name: Run markdown-link-check in the developers docs
        run: |
          find ./docs/developers -name "*.md" | xargs markdown-link-check \
            --verbose \
            --config .github/config/markdown-links-config.json \
            || { echo "Check that anchor links are lowercase"; exit 1; }
      - name: Run markdown-link-check on main documentation
        run: |
          markdown-link-check \
          --verbose \
          --config .github/config/markdown-links-config.json \
          README.md CONTRIBUTING.md CODE_OF_CONDUCT.md \
          || { echo "Check that anchor links are lowercase"; exit 1; } 

  create-test-ref:
    runs-on: ubuntu-latest
    needs: validate-markdown
    outputs:
      testRef: ${{ steps.setRef.outputs.ref }}
    steps:
      - name: Set testRef output
        id: setRef
        run: |
          if [[ ${{ github.ref_name }} == release/v* ]]; then 
            echo "ref=${{github.ref_name}}" >> $GITHUB_OUTPUT
          else
            echo "ref=terraform" >> $GITHUB_OUTPUT
          fi

  # build:
  #   needs:
  #     - create-test-ref
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Remove cache
  #     run: rm -rf /opt/hostedtoolcache

  #   - uses: actions/checkout@v4

  #   - name: apply patches
  #     run: make apply-patches

  #   # Set up building environment, patch the dev repo code on dispatch events.
  #   - name: Set up Go 1.x
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Checkout dev opentelemetry-collector-contrib
  #     if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
  #     uses: actions/checkout@v4
  #     with:
  #       repository: ${{ github.repository_owner }}/opentelemetry-collector-contrib
  #       ref: main
  #       path: pkg/opentelemetry-collector-contrib

  #   - name: Checkout dev opentelemetry-collector
  #     if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
  #     uses: actions/checkout@v4
  #     with:
  #       repository: ${{ github.repository_owner }}/opentelemetry-collector
  #       ref: main
  #       path: pkg/opentelemetry-collector

  #   - name: append replace statement to go.mod to build with dev repo
  #     if: github.event_name == 'repository_dispatch' && github.event.action == 'dependency-build'
  #     run: |
  #       echo "replace github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsxrayexporter => ./pkg/opentelemetry-collector-contrib/exporter/awsxrayexporter" >> go.mod
  #       echo "replace go.opentelemetry.io/collector => ./pkg/opentelemetry-collector" >> go.mod
  #       cat go.mod
  #       ls pkg

  #   - name: Cache binaries
  #     id: cached_binaries
  #     uses: actions/cache@v3
  #     with:
  #       key: "cached_binaries_${{ github.run_id }}"
  #       path: build

  #   # Unit Test and attach test coverage badge
  #   - name: Unit Test
  #     if: steps.cached_binaries.outputs.cache-hit != 'true'
  #     run: make gotest

  #   - name: Upload Coverage report to CodeCov
  #     if: steps.cached_binaries.outputs.cache-hit != 'true'
  #     uses: codecov/codecov-action@v3
  #     with:
  #       file: ./coverage.txt

  #   # Build and archive binaries into cache.
  #   - name: Build Binaries
  #     if: steps.cached_binaries.outputs.cache-hit != 'true'
  #     run: make build

  #   # upload the binaries to artifact as well because cache@v3 hasn't support windows
  #   - name: Upload
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: binary_artifacts
  #       path: build
  #       retention-days: 1

  e2etest-release:
    runs-on: ubuntu-latest
    needs: [create-test-ref]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.COLLECTOR_ASSUMABLE_ROLE_ARN }}
          aws-region: us-west-2

      - name: Login to Public Integration Test ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws
        env:
          AWS_REGION: us-east-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: public.ecr.aws/${{ env.ECR_REPO }}

      #Build the adot collector image for two primary reasons:
      #-Using the adot collector image to do the integration test
      #-Export it for delivery version image in CD
      #Documentation: https://github.com/docker/build-push-action
      - name: Build ADOT collector image
        uses: docker/build-push-action@v5
        with:
          file: cmd/awscollector/Dockerfile
          context: .
          push: true
          tags: |
            public.ecr.aws/${{ env.ECR_REPO }}:test1234876
            public.ecr.aws/${{ env.ECR_REPO }}:latest
          build-args: BUILDMODE=copy
          cache-from: type=registry,ref=public.ecr.aws/${{ env.ECR_REPO }}:test1234876
          cache-to: type=inline
          platforms : linux/amd64, linux/arm64
          labels: ${{ steps.meta.outputs.labels }}

  get-testing-suites: 
    runs-on: ubuntu-latest
    needs: [create-test-ref]
    outputs:
      test-case-batch-key: ${{ steps.set-batches.outputs.batch-keys }}
      test-case-batch-value: ${{ steps.set-batches.outputs.batch-values }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: ${{ needs.create-test-ref.outputs.testRef }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: aws-otel-collector
          ref: ${{ github.ref_name }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: testing-framework/tools/batchTestGenerator/go.sum

      - name: Create test batch key values
        id: set-batches
        run: |
          cd testing-framework/tools/batchTestGenerator
          go build
          ./batchTestGenerator github --testCaseFilePath=$GITHUB_WORKSPACE/aws-otel-collector/.github/config/testcases.json --maxBatch=${{ env.MAX_JOBS }} \
            --include=${{ env.BATCH_INCLUDED_SERVICES }}
      - name: List testing suites
        run: |
          echo ${{ steps.set-batches.outputs.batch-keys }}
          echo ${{ steps.set-batches.outputs.batch-values }}

  run-logs-testbed:
    runs-on: ubuntu-latest
    # needs: [ e2etest-release, create-test-ref]

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.COLLECTOR_ASSUMABLE_ROLE_ARN }}
          aws-region: us-west-2
          # 6 hours
          role-duration-seconds: 21600

      - name: Login to Public Integration Test ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws
        env:
          AWS_REGION: us-east-1

      - name: Checkout testing framework
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: ${{ needs.create-test-ref.outputs.testRef }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run tests
        run: |
          export TEST_IMAGE=public.ecr.aws/aws-otel-test/adot-collector-integration-test:v0.34.0-1124251
          cd testing-framework/adot-testbed
          ./gradlew test --rerun-tasks --info
